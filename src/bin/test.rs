pub mod story { use inkgen :: runtime as inkgen ; pub fn story ( ) -> inkgen :: Story { let input : inkgen :: Rc < inkgen :: Cell < usize >> = inkgen :: Rc :: default ( ) ; inkgen :: Story :: new ( input . clone ( ) , move || { loop { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"What\'s that?\" my master asked." ) ) ] , Some ( vec ! [ vec ! [ inkgen :: Part :: Text ( String :: from ( "\"I am somewhat tired" ) ) , inkgen :: Part :: Text ( String :: from ( ".\"" ) ) ] , vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Nothing, Monsieur!\"" ) ) ] , vec ! [ inkgen :: Part :: Text ( String :: from ( "\"I said, this journey is appalling" ) ) , inkgen :: Part :: Text ( String :: from ( ".\"" ) ) ] ] ) ) ; let choice = input . get ( ) ; match choice { 0usize => { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"I am somewhat tired" ) ) , inkgen :: Part :: Text ( String :: from ( ",\" I repeated." ) ) ] , None ) ; break } 1usize => { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Nothing, Monsieur!\"" ) ) , inkgen :: Part :: Text ( String :: from ( "I replied." ) ) ] , None ) ; break } 2usize => { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"I said, this journey is appalling" ) ) , inkgen :: Part :: Text ( String :: from ( "and I want no more of it.\"" ) ) ] , None ) ; break } _ => continue , } } } ) } mod knot_tomorrow { use inkgen :: runtime as inkgen ; pub fn entry ( input : inkgen :: Rc < inkgen :: Cell < usize >> ) -> impl inkgen :: Generator < Yield = inkgen :: Paragraph , Return = ( ) > { stitch_morning ( input . clone ( ) ) } fn stitch_morning ( input : inkgen :: Rc < inkgen :: Cell < usize >> ) -> impl inkgen :: Generator < Yield = inkgen :: Paragraph , Return = ( ) > { move || { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "I heard a mumbled \"Good morning...\" as my master rolled out of bed." ) ) ] , None ) ; yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Are you alright, Monsieur?\" I asked." ) ) ] , None ) ; loop { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Quite right,\" he seemed to try to say." ) ) ] , Some ( vec ! [ vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Are you quite sure of that?\"" ) ) ] , vec ! [ inkgen :: Part :: Text ( String :: from ( "\"You don\'t look quite right" ) ) , inkgen :: Part :: Text ( String :: from ( ".\"" ) ) ] , vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Very well" ) ) , inkgen :: Part :: Text ( String :: from ( ".\"" ) ) ] ] ) ) ; let choice = input . get ( ) ; match choice { 0usize => { break } 1usize => { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"You don\'t look quite right" ) ) , inkgen :: Part :: Text ( String :: from ( ", Monsieur,\" I felt the need to say, \"You look rather tired.\"" ) ) ] , None ) ; break } 2usize => { yield inkgen :: Paragraph :: new ( vec ! [ inkgen :: Part :: Text ( String :: from ( "\"Very well" ) ) , inkgen :: Part :: Text ( String :: from ( ", call if you need me,\" I say, as I leave the room." ) ) ] , None ) ; break } _ => continue , } } } } } }
